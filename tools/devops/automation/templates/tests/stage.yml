# Main template that contains all the jobs that are required to run the device tests.
#
# The stage contains two different jobs
#
# tests: Runs the tests on a pool that contains devices that are capable to run them.
# publish_html: Because vsdrop is not supported on macOS we have an extra job that
#   will run on a pool with Windows devices that will publish the results on VSDrop to
#   be browsable.

parameters:

# string that is used to identify the status to be used to expose the result on GitHub
- name: statusContext
  type: string
  default: 'iOS Device Tests' # default context, since we started dealing with iOS devices.

# string that contains the extra labels to pass to xharness to select the tests to execute.
- name: testsLabels
  type: string
  default: '--label=run-ios-64-tests,run-non-monotouch-tests,run-monotouch-tests,run-mscorlib-tests' # default context, since we started dealing with iOS devices.

# name of the pool that contains the iOS devices
- name: testPool
  type: string
  default: ''

# demand that has to be matched by a bot to be able to run the tests.
- name: extraBotDemands
  type: object
  default: []

- name: useXamarinStorage
  type: boolean
  default: false

- name: vsdropsPrefix
  type: string

- name: stageName
  type: string

- name: displayName
  type: string

- name: keyringPass
  type: string

- name: testPrefix
  type: string

- name: gitHubToken
  type: string

- name: xqaCertPass
  type: string

- name: enableDotnet
  type: boolean
  default: false

- name: makeTarget
  type: string
  default: 'vsts-device-tests' # target to be used to run the tests

- name: condition
  type: boolean
  default: true

- name: parseLabels
  type: boolean
  default: true

stages:
- stage: ${{ parameters.stageName }}
  displayName: ${{ parameters.displayName }}
  dependsOn:
  - build_packages
  # we need to have the pkgs built and the device sets to be ran, that is decided via the labels or type of build during the build_packages stage
  condition: and(succeeded(), ${{ parameters.condition }})

  jobs:
  - ${{ if eq(parameters.parseLabels, true) }}:
    - job: configure
      displayName: 'Configure build'
      pool:
        vmImage: windows-latest

      variables:
        isMain: $[eq(variables['Build.SourceBranch'], 'refs/heads/main')]
        isScheduled: $[eq(variables['Build.Reason'], 'Schedule')]

      steps:
      - template: ../common/configure.yml
        parameters: 
          uploadArtifacts: false
          enableDotnet: ${{ parameters.enableDotnet }}

  - job: tests
    dependsOn:
    - ${{ if eq(parameters.parseLabels, true) }}:
      - configure
    displayName: 'Run ${{ parameters.testPrefix }} Device Tests'
    timeoutInMinutes: 1000

    variables:
      # old and ugly env var use by jenkins, we do have parts of the code that use it, contains the PR number
      PR_ID: $[ dependencies.configure.outputs['labels.pr-number'] ]
      # set the branch variable name, this is required by jenkins and we have a lot of scripts that depend on it
      BRANCH_NAME: $[ replace(variables['Build.SourceBranch'], 'refs/heads/', '') ]
      XHARNESS_LABELS: $[ dependencies.configure.outputs['labels.xharness-labels'] ]
      ${{ if eq(parameters.testPool, '') }}:
        AgentPoolComputed: $(PRBuildPool)
      ${{ else }}:
        AgentPoolComputed: ${{ parameters.testPool }}

    pool:
      name: $(AgentPoolComputed)
      demands: 
      - Agent.Name -equals "XAMBOT-1175.Monterey"
      workspace:
        clean: all
    steps:
    - template: build.yml
      parameters:
        testsLabels: ${{ parameters.testsLabels }}
        statusContext: ${{ parameters.statusContext }}
        useXamarinStorage: ${{ parameters.useXamarinStorage }}
        vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
        keyringPass: ${{ parameters.keyringPass }}
        testPrefix: ${{ parameters.testPrefix }}
        makeTarget: ${{ parameters.makeTarget }}
        gitHubToken: ${{ parameters.gitHubToken }}
        xqaCertPass: ${{ parameters.xqaCertPass }}

  - job: upload_vsdrops
    displayName: 'Upload report to vsdrops'
    timeoutInMinutes: 1000
    dependsOn: tests # can start as soon as the tests are done
    condition: succeededOrFailed()
    pool:
      vmImage: 'windows-latest'
      workspace:
        clean: all
    steps:
    - template: ../common/upload-vsdrops.yml
      parameters:
        testPrefix: ${{ parameters.testPrefix }}
        provisioningFailed: $[ dependencies.tests.outputs['runTests.PROVISIONING_FAILED']

  - job: upload_vsts_tests
    displayName: 'Upload xml to vsts'
    timeoutInMinutes: 1000
    dependsOn: tests # can start as soon as the tests are done
    condition: succeededOrFailed()
    pool:
      vmImage: 'windows-latest'
      workspace:
        clean: all
    steps:
    - template: ../common/upload-vsts-tests.yml
      parameters:
        testPrefix: ${{ parameters.testPrefix }}
        provisioningFailed: $[ dependencies.tests.outputs['runTests.PROVISIONING_FAILED']

  - job: publish_html
    displayName: 'Publish Html report in VSDrops'
    timeoutInMinutes: 1000
    dependsOn: # has to wait for the tests to be done AND the data to be uploaded
    - tests
    - upload_vsdrops
    - upload_vsts_tests
    condition: succeededOrFailed()
    variables:
      # Define the variable FOO from the previous job
      # Note the use of single quotes!
      TESTS_BOT: $[ dependencies.tests.outputs['runTests.TESTS_BOT'] ]
      TESTS_JOBSTATUS: $[ dependencies.tests.outputs['runTests.TESTS_JOBSTATUS'] ]
    pool:
      vmImage: 'windows-latest'
      workspace:
        clean: all
    steps:
    - template: ../common/publish-html.yml
      parameters:
        statusContext: ${{ parameters.statusContext }}
        vsdropsPrefix: ${{ parameters.vsdropsPrefix }}
        testPrefix: ${{ parameters.testPrefix }}
